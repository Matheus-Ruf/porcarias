#include <stdio.h>
#include <stdlib.h>
/* acrescente demais includes que voce queira ou precise */

/* Funcoes privadas restritas a este modulo.
 * Voce deve implementa-las pois serao necessarias,
 * embora elas nao precisem estar no .h */

struct racional {
    unsigned short int valido; /* um racional eh invalido se den == 0 */
    int num;                   /* numerador do racional               */
    int den;                   /* denominador do racional             */
};

/* retorna um numero aleatorio entre min e max, inclusive. */
int aleat (int min, int max)
{
	return min + rand() % (max - min + 1);
}



/* Maximo Divisor Comum entre a e b      */
/* calcula o mdc pelo metodo de Euclides */
/* dica: a versao recursiva eh bem elegante! */
int mdc (int a, int b) //correto
{
	if(b == 0)
		return a;
	return mdc(b, a % b);
}



/* Minimo Multiplo Comum entre a e b */
/* mmc = (a * b) / mdc (a, b)        */
int mmc (int a, int b)
{
	return (a * b) / mdc (a, b);
}



/* Recebe um numero racional e o retorna simplificado.
 * Por exemplo, ao receber 10/8 devera retornar 5/4.
 * Se ambos numerador e denominador forem negativos, devera retornar um positivo.
 * Se o denominador for negativo, o sinal deve migrar para o numerador.
 * Quem chama esta funcao deve garantir que o racional r eh valido */
void simplifica_r (struct racional *r) //correto
{
	int i_mdc;
	
	i_mdc = mdc(r->num, r->den);
	r->den /= i_mdc;
	r->num /= i_mdc;
	
	if(r->den < 0) //troca sinais de num e de den se den for negativo
	{
		r->den = -(r->den);
		r->num = -(r->num);
	}
	
	return;
}


/* aqui voce pode definir mais funcoes internas, caso queira ou precise */

/* * Implemente aqui as funcoes definidas no racionais.h.*/




/* Observacoes iniciais sobre como a struct racional deve ser
 * utilizada para representar o conceito abstrato de um numero
 * racional, conforme definido na matematica:
 *
 * Os campos "num" e "den" conterao respectivamente o numerador
 * e o denominador de um racional. O campo "valido" contera um
 * valor que pode ser 0 ou 1, dependendo da informacao contida
 * no denominador. Se este for 0 temos caracterizado um racional
 * invalido, por isso o campo "valido" devera ser inicializado
 * com o valor 0. Caso contrario devera ser inicializado com o
 * valor 1.
 *
 * Nossos racionais serao sempre simplificados, isto eh, conterao
 * os menores inteiros que representam o mesmo numero racional.
 * Por exemplo, o racional 10/8 pode ser simplificado para 5/4.
 *
 * Tambem consideraremos que, caso o racional seja negativo, o
 * sinal estara sempre no numerador e nunca no denominador.
 * Por exemplo, o racional 5/-4 devera ser representado por -5/4.
 *
 * Usaremos duas funcoes que permitem que um racional seja
 * inicializado pelos usuarios deste modulo. As funcoes serao
 * "cria_r" e "sorteia_r", que sao definidas abaixo.
 *
 * Dentro do conceito de Tipos Abstratos de Dados, o usuario
 * deste modulo nunca pode violar o tipo acessando diretamente
 * seus campos "num", "den" ou "valido". Por isso este modulo
 * contera tres funcoes para que o usuario tenha acesso a estes
 * campos. As funcoes definidas abaixo sao respectivamente
 * "numerador_r", "denominador_r" e "valido_r".
 *
 * Um Tipo Abstrato de Dados tambem define as operacoes que
 * podem ser feitas sobre a abstracao do numero racional.
 * No nosso caso definiremos somente quatro operacoes, que sao:
 * somar (soma_r), subtrair (subtrai_r), multiplicar (multiplica_r)
 * e, finalmente, dividir (divede_r).
 * Isto permitira que o usuario possa realizar as quatro operacoes
 * sem ter acesso aos campos internos da struct.
 * As 4 operacoes sao especificadas abaixo.
 *
 * Para permitir que o usuario compare dois numeros racionais,
 * este modulo tambem preve uma funcao para isso, para permitir
 * operacoes abstratas equivalentes aos operadores
 * "<", "==" e ">". Os demais operadores ("<=", "!=" e ">=")
 * poderao ser implementados com o uso dos operadores logicos
 * "&&", "||" e "!".
 *
 * Finalmente, este modulo tambem preve uma funcao que imprime
 * o racional na forma convencional que o ser humano prefere.
 *
 * A seguir, as especificacoes de cada funcao deste modulo.
*/





/* Retorna 1 se o racional r eh valido ou 0 caso contrario.
 * Esta funcao se limita a testar o campo "valido" da struct,
 * o qual deve ter sido inicializado previamente nas funcoes
 * que produzem numeros racionais (cria_r, sorteia_r)
 * bem como nas 4 operacoes aritmeticas definidas.
 * Um racional eh invalido se o denominador for nulo.  */
int valido_r (struct racional r)
{
	if(r.den == 0)
		return 0; //invalido
	return 1; //valido
}



/* Cria um numero racional com base nas informacoes dos parametros.
 * Isto eh, os campos "num" e "den" da struct racional devem receber
 * respectivamente os valores dos parametros numerador e denominador.
 * O campo "valido" da struct racional deve ser devidamente inicializado,
 * isto eh, recebe 0 se o denominador for zero e recebe 1 caso contrario.
 * O racional deve ser retornado na forma simplificada, conforme
 * especificado acima.
*/
struct racional cria_r (int numerador, int denominador)
{
	struct racional cria;
	cria.num = numerador;
	cria.den = denominador;
	cria.valido = valido_r(cria);
	if (cria.valido == 0)
		return cria;
	simplifica_r(&cria);
	return cria;
}


/* Retorna um numero racional gerado aleatoriamente.
 * O numerador e o denominador devem ser inteiros aleatorios cujos
 * valores variam de -n a n, onde o valor de n esta no parametro.
 * O campo "valido" da struct racional deve ser devidamente inicializado,
 * isto eh, recebe 0 se o denominador for zero e recebe 1 caso contrario.
 * O racional deve ser retornado na forma simplificada, conforme
 * especificado acima.
*/
struct racional sorteia_r (int n)
{
	int nm, dn;
	struct racional r;
	
	nm = aleat(-n, n);
	dn = aleat(-n, n);
	r = cria_r(nm, dn);
	return r;
	//return cria_r( aleat(-n, n) , aleat(-n, n) );
}


/* Retorna o numerador do racional r */
int numerador_r (struct racional r)
{
	return r.num;
}



/* Retorna o denominador do racional r */
int denominador_r (struct racional r)
{
	return r.den;
}



/* Retorna a soma (simplificada) dos racionais r1 e r2 no parametro *r3 e 
 * Obs.: nao esquecer de inicializar o campo "valido".
 * Quem chama esta funcao deve garantir que os racionais r1 e r2 sao validos.
 * Eh matematicamente garantido que a soma de dois racionais validos seja
 * valido.  */
void soma_r (struct racional r1, struct racional r2, struct racional *r3)
{
	r3->den = mmc(r1.den, r2.den);
	r3->num = (r3->den / r1.den) * r1.num;
	r3->num += (r3->den / r2.den) * r2.num;
	r3->valido = 1;
	simplifica_r(r3);
	return;
}



/* Retorna a subtracao dos racionais r1 e r2 no parametro *r3 e
 * Obs.: nao esquecer de inicializar o campo "valido".
 * Eh matematicamente garantido que a subtracao de dois racionais validos seja
 * valido.  */
void subtrai_r (struct racional r1, struct racional r2, struct racional *r3)
{
    r3->den = mmc(r1.den, r2.den);
	r3->num = (r3->den / r1.den) * r1.num;
	r3->num -= (r3->den / r2.den) * r2.num;
	r3->valido = 1;
	simplifica_r(r3);
	return;
}



/* Retorna a multiplicacao dos racionais r1 e r2 no parametro *r3 e
 * Obs.: nao esquecer de inicializar o campo "valido".
 * Eh matematicamente garantido que a multiplicacao de dois racionais validos seja
 * valido.  */

void multiplica_r (struct racional r1, struct racional r2, struct racional *r3)
{
    r3->num = r1.num * r2.num;
	r3->den = r1.den * r2.den;
	r3->valido = 1;
	simplifica_r(r3);
	return;
}



/* Retorna a divisao dos racionais r1 e r2 no parametro *r3 e
 * retorna 1 se *r3 for valido ou 0 caso contrario.
 * --NAO eh-- matematicamente garantido que a divisao de dois racionais validos 
 * seja valido. Se o numerador do racional r2 for 0, entao o racional 
 * resultante eh invalido. */
int divide_r (struct racional r1, struct racional r2, struct racional *r3)
{
    r3->num = r1.num * r2.den;
	r3->den = r1.den * r2.num;
	r3->valido = valido_r(*r3);
	if(r3->valido == 1)
	    simplifica_r(r3);
	return r3->valido;
}



/* Retorna -1 se r1 < r2; 0 se r1 == r2; 1 se r1 > r2 */
int compara_r (struct racional r1, struct racional r2)
{
    float r1n, r1d, r2n, r2d;
    r1n = r1.num;
    r1d = r1.den;
    r2n = r2.num;
    r2d = r2.den;
    if(r1n/r1d < r2n/r2d)
        return -1;
    if(r1n/r1d == r2n/r2d)
        return 0;
     //r1.num/r1.den > r2.num/r2.den
        return 1;
}



/* Imprime um racional r
   A impressao deve respeitar o seguinte:
   - o racional deve estar na forma simplificada;
   - o formato de saida deve ser "r.num/r.den", a menos dos casos abaixo;
   - nao use espacos em branco apos o numero e nao mude de linha;
   - se o numerador for igual a 0, deve ser impresso somente zero;
   - se o denominador for igual a 1, deve ser impresso somente o numerador;
   - se o numerador e denominador forem o mesmo valor, deve imprimir somente 1;
   - se o racional for negativo, o sinal deve ser impresso antes do numero;
   - se ambos numerador e denominador forem negativos, o racional eh positivo;
   - se o racional for invalido, deve imprimir a mensagem "INVALIDO"           */
void imprime_r (struct racional r)
{
	int i;
	
	if(r.den == 0)
	{
		printf("INVALIDO");
		return;
	}
	
	simplifica_r(&r);
	
	//soma as possibilidades
	i = 0;
	if(r.num == 0) //numerador 0, imprime 0
		i += 1;
	if(r.den == 1) //denominador 1, imprime numerador
		i += 2;
	if(r.num == r.den) //numerador igual denominador, imprime 1
		i += 4;
	switch(i)
	{
		case 0:
			printf("%d/%d", r.num, r.den);
			break;
		case 1:
		case 3:
			printf("0");
			break;
		case 2:
			printf("%d", r.num);
			break;
		case 6:
		case 4:
			printf("1");
			break;
		//nao ha case 5 e 7 pois sao possibilidades impossiveis
	}
	return;
}

int main ()
{
    int n, max, i;
    struct racional r1, r2,
                    r_som, r_sub, r_mul, r_div;
    
    srand(0);
    
    do{scanf("%d", &n);
    }while(0>n || n>100);
    do{scanf("%d", &max);
    }while(0>max || max>30);
    
    for(i = 1; i <= n; i++)
    {
        printf("%d: ", i);
        r1 = sorteia_r(max);
        r2 = sorteia_r(max);
        
        imprime_r(r1);
            printf(" ");
        imprime_r(r2);
            printf(" ");
            
        if(valido_r(r1) == 0 || valido_r(r2) == 0)
        {
            printf("NUMERO INVALIDO");
                printf("\n");
            return 1;
        }
        
        soma_r(r1, r2, &r_som);
        subtrai_r(r1, r2, &r_sub);
        multiplica_r(r1, r2, &r_mul);
        divide_r(r1, r2, &r_div);
        
        if(valido_r(r_div) == 0)
        {
            printf("DIVISAO INVALIDA");
                printf("\n");
            return 1;
        }
        
        imprime_r(r_som);
            printf(" ");
        imprime_r(r_sub);
            printf(" ");
        imprime_r(r_mul);
            printf(" ");
        imprime_r(r_div);
            printf("\n");
    }
    return 0;
}
